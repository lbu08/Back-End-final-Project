// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "sqlite"
  url          = "file:./database.db"
  relationMode = "prisma"
}

model User {
  id          String @id @default(uuid())
  username    String @unique
  password    String
  name        String
  email       String
  phoneNumber String
  profilePicture  String

  reviews  Review[]
  bookings Booking[]
}

model Review {
  id         String @id @default(uuid())
  userId     String
  propertyId String
  rating     Int
  comment    String

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([propertyId])
  @@index([userId])
}

model Amenity {
  id   String @id @default(uuid())
  name String

  property Property[]
}

model Host {
  id          String     @id @default(uuid())
  username    String     @unique
  password    String
  name        String
  email       String
  phoneNumber String
  profilePicture  String
  aboutMe     String
  listings    Property[]
}

model Property {
  id            String  @id @default(uuid())
  hostId        String
  title         String
  description   String
  location      String
  pricePerNight Decimal
  bedroomCount  Int
  bathRoomCount Int
  maxGuestCount Int
  rating        Int

  //host Host []

  host    Host      @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amenities Amenity[]

  reviews  Review[]
  booking Booking[]

  @@index([hostId])
}

model Booking {
  id             String   @id @default(uuid())
  userId         String
  propertyId     String
  checkinDate    DateTime
  checkoutDate   DateTime
  numberOfGuests Int
  totalPrice     Float
  bookingStatus  String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  properties Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
  @@index([propertyId])
}
